"""
基数排序
基数排序（Radix Sort）是一种非比较的整数排序算法。其原理是将整数
按位数切割成不同的数字，然后堆每个位数上的数字进行分别比较。
大多数数字计算机内部将所有数据表示成二进制数字的电子表示形式，因此
用一组二进制数字表示形式处理整数表示的数字是最方便的。为了实现基数
排序，我们使该排序从最高有效位（MSD）或最低有效位（LSD）开始。例如
将目标数字组1234排序为列表时，可以从1或4开始。

LSD基数排序通常使用以下排序顺序：短键排在长键之前，相同长度的键按
词法排序，这与整数表示的正常顺序是一致的，例如序列1，2，3，4，5，6
7，8，9，10，11
MSD基数排序则使用词典顺序，它适用于对字符串（如单词）或固定长度的
整数进行排序。一个序列，如“b,c,d,e,f,g,h,i,j,ba”将会按词法排序为
“b,ba,c,d,e,f,g,h,i,j”。如果词典排序用于表示可变量长度的整数，例
如从1到10的数字，输出将表示为1，10，2，3，4，5，6，7，8，9。

基数排序的方式可以采用上面提到的LSD或MSD方法，LSD的排序方式由键值
的最右边开始，而MSD则相反，由键值的最左边开始。LSD的基数排序更适用
于位数小的数列，如果位数多的话，使用MSD的效率会比较好。

实例分析
假设我们有输入数组A{53，3，542，748，14，214，154，63，616}，这里
数组位数比较小，所以我们采用LSD的基数排序。
我们这里先在数位较短的数前面的位数上补零，比如53补上至053，3补上至003
，14补上至014，63补上至063.现在的数组表现形式为{053，003，542，748，
014，214，154，063，616}。
现在我们首先按照“个位”上数字大小对数组中的数进行排序，排序后的结果是
{542，053，003，063，014，214，154，616，748}。
接着按照“十位”上数字大小对数组中的数字进行排序，排序后结果是{003，014，
214，616，542，748，053，154，063}。
最后按照“百位”上数字大小对数组中的数进行排序，排序后结果是{003，014，
053，063，154，214，542，616，748}，这就是最终结果。
"""


def radix_sort(nums):
    max_length = len(str(max(nums)))
    for i in range(max_length):  # 最大的数有几位就循环几次
        bucket = [[] for k in range(10)]  # 每一次循环都要清空桶子
        for j in nums:
            bucket[int(j / (10 ** i)) % 10].append(j)
        nums = [a for b in bucket for a in b]
    return nums


if __name__ == "__main__":
    nums = [53, 3, 542, 748, 14, 214, 154, 63, 616]
    print(radix_sort(nums))
